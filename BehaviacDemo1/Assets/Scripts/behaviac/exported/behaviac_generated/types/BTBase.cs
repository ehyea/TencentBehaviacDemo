// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using UnityEngine;
using UnityEngine.AI;
using behaviac;
///<<< END WRITING YOUR CODE

public class BTBase : behaviac.Agent
///<<< BEGIN WRITING YOUR CODE BTBase
///<<< END WRITING YOUR CODE
{
	private bool p_IsCanMove = false;
	public void _set_p_IsCanMove(bool value)
	{
		p_IsCanMove = value;
	}
	public bool _get_p_IsCanMove()
	{
		return p_IsCanMove;
	}

	private bool p_IsMoveing = false;
	public void _set_p_IsMoveing(bool value)
	{
		p_IsMoveing = value;
	}
	public bool _get_p_IsMoveing()
	{
		return p_IsMoveing;
	}

	public void GetTargetPos(float distance)
	{
///<<< BEGIN WRITING YOUR CODE GetTargetPos
        Vector3 direction = new Vector3(UnityEngine.Random.Range(-1f, 1f), 0f, UnityEngine.Random.Range(-1f, 1f));
        Vector3 tempPos = transform.position + direction * distance;
	    NavMeshPath path = new NavMeshPath();
	    navMeshAgent.CalculatePath(tempPos, path);
	    if (path.corners.Length >= 2)
	    {
	        targetPos = path.corners[path.corners.Length - 1];
	    }
	    UnityEngine.Debug.Log("TargetPos:" + targetPos);
	    ///<<< END WRITING YOUR CODE
	}

	public bool IsNearTargetPos()
	{
///<<< BEGIN WRITING YOUR CODE IsNearTargetPos
	    Vector3 dir = transform.position - targetPos;
        if (dir.magnitude <= 0.25)
	    {
            UnityEngine.Debug.Log("EndToMove");
	        return true;
	    }
		return false;
///<<< END WRITING YOUR CODE
	}

	public void MoveToTarget(float speed)
	{
///<<< BEGIN WRITING YOUR CODE MoveToTarget
        navMeshAgent.SetDestination(targetPos);
        UnityEngine.Debug.Log("BeginToMove");
///<<< END WRITING YOUR CODE
	}

	public void SetAnimatorBoolParameter(string param, bool enable)
	{
///<<< BEGIN WRITING YOUR CODE SetAnimatorBoolParameter
        animator.SetBool(param, enable);
///<<< END WRITING YOUR CODE
	}

    ///<<< BEGIN WRITING YOUR CODE CLASS_PART
    private Vector3 targetPos = Vector3.zero;

    private Animator animator;
    private NavMeshAgent navMeshAgent;
    //private const string workSpace = "Assets/Resources/behaviac";
    public string btName = "Monster";
    private void Start()
    {
        animator = GetComponent<Animator>();
        navMeshAgent = GetComponent<NavMeshAgent>();
        p_IsCanMove = true;
        BtInit();
       StartCoroutine(BtUpdateLoop());
    }

    private void BtInit()
    {
        bool btloadResult = btload(btName, true);
        if (btloadResult)
            btsetcurrent(btName);
    }

    IEnumerator BtUpdateLoop()
    {
       EBTStatus status = EBTStatus.BT_RUNNING;
       while (status == EBTStatus.BT_RUNNING)
       {
           status = btexec();
           yield return null;
       }
    }
    ///<<< END WRITING YOUR CODE

}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

